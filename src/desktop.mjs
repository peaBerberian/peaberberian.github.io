// ROADMAP
// =======
//
// high priority:
//
// medium priority:
// - when side-by-side window snapping we should be able to resize both at the same time
// - if click out of the screen / mouseleave do not deactivate window?
// - sometimes app has focus (e.g. "notes" can be written on), but not the window
// - start menu should always do some kind of sublist when sublists are enabled
//
// low priority:
// - windows moving when moving taskbar to top/bottom. Could be cool to stay in
//   place if possible
// - disable text shadows on icons if opacity big enough?
// - move around icon?
// - detect iframe URL change? Do something about github?
// - Allow to auto-hide taskbar. Should be relatively simple.
// - The clock icon's emoji reflect the current hour?
// - get localStorage wallpaper before HTML body + external JS?
// - Wallpaper: loading image from device
// - In relative window dimensions and positioning, once we go full height/width
//   due to a browser window resize, we lose the "wanted" percentage size and
//   position of that element
// - all images are their height and width defined to avoid repaint effects
// - indexeddb filesystem
// - taskbar hover opacity different?
// - Safari has this weird almost-double scroll sometimes. Though only sometimes
//   and when it shows it disappears forever after like 2 seconds.

// /!\ Apps file is automatically generated by the build script
// We first import app-utils as a library for it
import "./app-utils.mjs";
import apps from "./__generated_apps.mjs";

import generateDirectoryApp from "./directory.mjs";
import AppIcons from "./components/AppIcons.mjs";
import StartMenu from "./components/StartMenu.mjs";
import Taskbar from "./components/Taskbar.mjs";
import WindowsManager from "./components/window/WindowsManager.mjs";

import { is12HourClockFormat } from "./utils.mjs";

// Fragment is only used for in-app anchors for now.
// We can remove it when the desktop is restared to prevent weird behaviors
if (window.location.href.includes("#")) {
  window.location.replace("#");
}

document.addEventListener("DOMContentLoaded", function () {
  const desktopElt = document.getElementById("desktop");

  /** Clock shown as a taskbar "applet". */
  const clockElt = initializeClockElement();
  clockElt.onclick = function () {
    for (const app of apps) {
      if (app.id === "clock") {
        createApp(app, {
          activate: true,
          fullscreen: false,
          skipAnim: false,
          centered: true,
        });
        return;
      }
    }
  };

  const taskbarManager = new Taskbar({ applets: [clockElt] });
  const windowsManager = new WindowsManager(taskbarManager);

  const openAppFromIconOrStartMenu = (app) => {
    createApp(app, {
      activate: true,
      fullscreen: false,
      skipAnim: false,
      centered: false,
    });
  };
  desktopElt.appendChild(
    AppIcons(
      getDesktopIconsList(openAppFromIconOrStartMenu),
      openAppFromIconOrStartMenu,
    ),
  );
  StartMenu(apps, openAppFromIconOrStartMenu);

  // Open default apps
  for (const app of apps) {
    if (app.autoload) {
      createApp(app, {
        activate: true,
        fullscreen: false,
        skipAnim: true,
        centered: true,
      });
    }
  }

  return;

  /**
   * Launch the given application.
   * @param {Object} app - Object describing the application that you want to
   * launch.
   * @param {Object} options - Various options to configure how that new
   * application window will behave
   * @param {boolean} [options.fullscreen] - If set to `true`, the application
   * will be started full screen.
   * @param {boolean} [options.skipAnim] - If set to `true`, we will not show the
   * open animation for this new window.
   * @param {boolean} [options.centered] - If set to `true`, the application
   * window will be centered relative to the desktop in which it can be moved.
   * @param {boolean} [options.activate] - If set to `true`, the application
   * window will be directly activated.
   * @returns {Object|null} - Object representing the newly created window.
   * `null` if no window has been created.
   */
  function createApp(app, options) {
    const windowElt = windowsManager.openApp(app, options);
    if (windowElt !== null) {
      desktopElt.appendChild(windowElt);
    }
  }
});

/**
 * Create a simple infinitely self-updating clock whose goal is to be shown
 * inside the taskbar.
 * NOTE: The interval started for this clock is never stopped. Call this
 * function only one time.
 *
 * @returns {HTMLElement} - The clock element itself, showing the digital
 * local hour.
 */
function initializeClockElement() {
  const clockElt = document.createElement("div");
  clockElt.className = "clock";
  const use12HourClockFormat = is12HourClockFormat();
  updateClock(use12HourClockFormat, clockElt);
  setInterval(() => updateClock(use12HourClockFormat, clockElt), 2000);
  return clockElt;
  function updateClock(use12HourClock, clockElt) {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    let ampm;
    if (use12HourClock) {
      ampm = hours >= 12 ? " PM" : " AM";
    } else {
      ampm = "";
    }
    const formattedHours = use12HourClock ? hours % 12 || 12 : hours;
    const formattedMinutes = minutes < 10 ? "0" + minutes : minutes;
    // NOTE: \u200B == Zero-width space. Allows line breaks if needed.
    clockElt.textContent = `${formattedHours}\u200B:\u200B${formattedMinutes}${ampm}`;
  }
}

function getDesktopIconsList(onOpen) {
  const appIcons = [];
  const appIconDirMap = new Map();
  for (const app of apps) {
    if (app.desktopDir !== undefined) {
      let list = appIconDirMap.get(app.desktopDir);
      if (list === undefined) {
        list = [];
        appIconDirMap.set(app.desktopDir, list);
        appIcons.push(generateDirectoryApp(app.desktopDir, list, onOpen));
      }
      list.push(app);
    } else {
      appIcons.push(app);
    }
  }

  return appIcons;
}
